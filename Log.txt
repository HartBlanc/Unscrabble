Current Objectives:
    dawg data structure
    Rename first_empty_below etc. to last_occupied_below.
    End game strategies where perfect information is available.
        Adversarial Search
    Profile and optimise



Pre 1st Feb:
    Created a viable functioning program without reading other peoples solutions

1st Feb:

2 second, 750kb solver
    http://www.gtoal.com/wordgames/jacobson+appel/aj.pdf


Will attempt to implement this solution as follows:
    1. dawg data structure
     a) start with trie [DONE]
     b) reduce using Hopcroft's algorithm
    2. anchor squares [DONE]
    3. cross checks and cross scores [DONE]
    4. backtracking algorithm [DONE]
    5. score calculation [DONE]
    6. account for blank tiles [DONE]

Whilst implementing this solution I will attempt to take a much more Object
Orientated approach.

4th Feb:

Renamed hand to rack and changed it from being a set to being a list
    (can have multiple of each letter)
Renamed dictionary/dict files to lexicon/lexicon

Got to grips with the definition of anchors.
     Anchor of the word is the leftmost, newly placed tile, of a newly formed word.
    'Potential anchors' / 'anchors of the row': any unoccupied square adjacent to a tile (above, below, left or right)

Have attempted to implement the blank tiles but will have to see in testing if it actually works.
One attempt, connecting to an already placed tile, gave the correct score.

Thoughts / Ideas:
    Rewrite README [DONE]
    Rename first_empty_below etc. to last_occupied_below.
    End game strategies where perfect information is available.
        Adversarial Search
    Rewrite first round function using trie. [DONE]
    Evaluate score whilst backtracking? [will not attempt]

5th Feb:
    The lexicon trie is now pickl serialised and is capable of adding
    newly encountered words
    Fixed 'jag' bug.
    Previously wouldn't suggest words that ended on the edge of the board.

    Notes from Chips Challenging Champions: Games, Computers and Artificial Intelligence:
    https://books.google.co.uk/books?id=QsNaTy9GO8kC&pg=PA317&lpg=PA317&dq=sigart+newsletter+80&source=bl&ots=Wl48O_3YST&sig=fHD_8lKINeCBPXv4gTkm-kon5wM&hl=en&sa=X&ved=0ahUKEwiNgqPFiY_ZAhXGLcAKHc1KD5AQ6AEILzAB#v=onepage&q=sigart%20newsletter%2080&f=false
    https://www.wikiwand.com/en/Maven_(Scrabble)
    Rack evaluation:
        'it pays to get rid of duplicate tiles and q'
        'qu valuable but q not'
    pre-endgame: 16 unseen tiles
    end game: when the bag is empty
    B* search
    For a perfect strategy:
        Calculate probabilities of getting each rack given the 'rack-leave' of each play and the tiles in the bag
        calculate the probabilities of all plays your opponent could make and hence the resulting boards
        for each resulting board generate all legal plays
        repeat until either you or opponent has no tiles.
        pick the legal play for which most scenarios end in you winning.

    Heuristic for rack evaluation
        calculate probabilities of getting each rack given the 'rack-leave' of each play and the tiles in the bag
        value of rack is the number of words that can be formed with that rack.

    Thoughts / Ideas:
        Profile and optimise
        Add program that reads facebook messenger WWF app board for input
        change squares to NxN array and get squares to indices of array (Numpy?)
        log of moves methods to undo / redo moves

8th Feb:
    Implemented delete method for trie class

    Thoughts / Ideas:
    Auto checker:
        The program checks to see if it could have generated the opponents move

10th Feb:

    Thoughts / Ideas:

    Rack evaluation
    https://www.word-grabber.com/word-trivia/scrabble-luck
    *   'The blank is worth about 30 points to a good player, each S about 10.
        The Q is a burden to whichever player receives it, effectively serving as a 5 point penalty for having to deal with it due to its effect in reducing bingo opportunities, needing either a U or a blank for a chance at a bingo and a 50-point bonus.
        The J is essentially neutral point-wise.
        The X and the Z are each worth about 3-5 extra points to the player who receives them. Their difficulty in playing in bingos is mitigated by their usefulness in other short words.'

    * include common suffixes/prefixes
        'ing'
        'er'


    Command line args

11th Feb:
    Moved Trie node class into trie.py
    Added command line args to lexicon and for go first

    Thoughts / Ideas:
    Quantify first move advantage

12th Feb:
    Started working on screen reader for wwf.
    managed to get images of all tiles in rack.
    Need to get images of all tiles for reference (don't use screenshots, use original images)
    Need to compare screenshots to references
    Build board and rack from results.


13th Feb:
    Downloaded board and split into tiles
    Found new package openCV.
    Will probably try to work with all images in memory and use openCV throughout
        Can selenium screenshot be taken in memory?
    Some inconsistencies:
        White lettering for newest words
            Replace white with black
                https://pythonprogramming.net/color-filter-python-opencv-tutorial/
        Transparency for tiles
            Can see Centre / DW / TW underneath
        Different shapes for tiles at different points of adjacency
            i.e. curved tiles and joined tiles
        Reference tiles are proving difficult to acquire, may take some time.
            Should in theory only take one game play through.
        With inconsistencies and without a FULL set of reference tiles identifying wildcards could prove challenging
        Full set includes all letters with and without wildcards on every background tiles
        26 (letters) * 2 (wc) * 5 (tiles) * 2 (colours) = 520 images


    14th Feb:
    Getting all reference images almost impossible due to red point at bottom right of tile.
    Solutions:
        Crop images to left of red point tiles and area where curvature doesn't matter
        Scan top right portion of tile and look for any black for WC.
    Found this interesting article about some next level cheating
    https://littlemaninmyhead.wordpress.com/2016/04/09/words-with-friends-trusts-the-clients-a-little-too-much/

    15th Feb:
    Replaced PIL with openCV
    Removed screenshot
        For rack can just use base64 strings from background image urls
        For board can get b64 string directly using js
    Use waitkey for imshow

    Will store references as b64 strings.
        For rack compare directly
        For board may be able to compare directly for letter values after crop
        For wc, black value top-right
    Need to identify tile locations perfectly to be able to compare directly.
        See closest multiples of 11 for potential paddings?
    Need to replace white with black perfectly.
    Need to identify start of red region consistently across images.

    May not need to consider all tiles every turn but may not be significantly
    more intensive to do so and could be significantly more convenient.

    Use past games to get all board tiles.
    What will b64 be like for blank tile?
    are b64 rack strings different on your turn vs opponents turn?

    16th Feb
    b64 rack strings are the same on your opponents turn
    red last_score tile is it's own element, not included in image.
    white letterings tiles are not perfectly white
    transparency of tiles means exact comparisons cannot be made for board
    will need to use structural similarity
        Current strategy is to get all reference tiles on empty tiles
        Replace white with black for all tiles, currently just 255 -> 0
        may need to use a range & mask

    16th Feb
    Changed Board class, get anchors on initialisation

    17th Feb
    Added wildcard support for playInSelenium
    Reader incorrectly identified a Q as a G
    Reader incorrectly identified a P as an F
    Replaced ssim with mse which seems to be working better
